#!/bin/bash
#
# Check DMARC
#
# Version 2014.05.18
#
# Copyright Sven Krohlas <sven@asbest-online.de>, GNU GPLv3+
#
# Checks all possible effective TLD names of a brand (like GMX or Yahoo)
# for their DMARC policy.
#
# Requires:
# * Internet access, obviously
# * https://publicsuffix.org/list/effective_tld_names.dat and fetches it on demand
# * wget, cat, sed

# utility functions
function help {
  echo "Check DMARC"
  echo "Checks all effective TLD subdomains of a given brand for a DMARC record and presents the results."
  echo ""
  echo "Synopsis"
  echo "checkdmarc options... [brand]..."
  echo ""
  echo "[brand] can be a string like 'gmx' or 'yahoo'."
  echo "Temporary files are being left behind in the current working directory for debug reasons."
  echo ""
  echo "Options"
  echo "-c, --cleanup"
  echo "     Cleanup temporary files."
  echo ""
  echo "--dmarc"
  echo "     Check the DMARC policies for the given brand."
  echo ""
  echo "-h, --help"
  echo "     Show this help."
  echo ""
  echo "--spftxt"
  echo "     Check the TXT records for SPF policies."
  echo""
  echo "--spfspf"
  echo "     Check the SPF records for SPF policies."

  exit
}



# evaluate parameters
if [ "$1" == "-h" ] || [ "$1" == "--help" ] || [ "$1" == "" ]; then
  help
fi


if [ "$1" == "-c" ] || [ "$1" == "--cleanup" ]; then
  echo "Cleanup ..."
  rm tmp_list.txt
  rm clean_list.txt
  rm effective_tld_names.dat
  rm results
  rm queries
  echo "... done!"

  exit
fi


if [ "$1" == "--dmarc" ] || [ "$1" == "--spfspf" ] || [ "$1" == "--spftxt" ]; then
  if [ "$2" == "" ]; then
    help
  fi

  if [ "$1" == "--dmarc" ]; then
    querytype="TXT _dmarc."
  fi

  if [ "$1" == "--spfspf" ]; then
    querytype="SPF "
  fi

  if [ "$1" == "--spftxt" ]; then
    querytype="TXT "
  fi

  brand=$2
fi



# let's go
echo "This script is going to make several thousand DNS request. Proceed at your own risk, iff you know what you are doing."
echo "Type 'yes' to proceed, anything else to abort."
read confirmation

if [ "$confirmation" != "yes" ]; then
  exit
fi


if [ ! -f effective_tld_names.dat ]; then
  wget https://publicsuffix.org/list/effective_tld_names.dat
fi

# cleanup file, step 1: newlines and comments
grep -v "//" effective_tld_names.dat | grep -e '^$' -v > tmp_list.txt

# cleanup file, step 2: entries starting with '*.'
sed 's/^\*\.//' tmp_list.txt > clean_list.txt


# Create the query script. The query basically looks like "host -t TXT _dmarc.gmx.net"
cat clean_list.txt | sed "s/^/host -t $querytype$brand./" > queries
chmod +x queries


# Run the query script, save the results
echo -n "Running "
echo -n "$(wc -l queries)"
echo ", this may take a while ..."
./queries > results


# Create statistics
echo -n "SERVFAIL: "
grep -c "SERVFAIL" results

echo -n "connection timed out; no servers could be reached: "
grep -c "connection timed out; no servers could be reached" results

if [ "$1" ==  "--dmarc" ] || [ "$1" == "--spftxt" ]; then
  echo -n "has no TXT record: "
  grep -c "has no TXT record" results
fi

if [ "$1" ==  "--spfspf" ]; then
  echo -n "has no SPF record: "
  grep -c "has no SPF record" results
fi

echo -n "NXDOMAIN: "
grep -c "NXDOMAIN" results 

echo -n "is an alias for: "
grep -c "is an alias for" results


if [ "$1" == "--dmarc" ]; then
  echo -n "p=none: "
  grep -c "p=none" results

  echo -n "p=quarantine: "
  grep -c "p=quarantine" results

  echo -n "p=reject: "
  grep -c "p=reject" results
fi


if [ "$1" == "--spfspf" ] || [ "$1" == "--spftxt" ]; then
  echo -n "redirect: "
  grep -c "redirect" results

  echo -n "?all: "
  grep -c "?all" results

  echo -n "~all: "
  grep -c "~all" results

  echo -n "-all: "
  grep -c "\-all" results
fi


# Print important results
echo ""

if [ "$1" == "--dmarc" ]; then
  echo "p=none details:"
  grep "p=none" results

  echo ""
  echo "p=quarantine details:"
  grep "p=quarantine" results

  echo ""
  echo "p=reject details:"
  grep "p=reject" results
fi


if [ "$1" == "--spfspf" ] || [ "$1" == "--spftxt" ]; then
  echo "redirect details:"
  grep "redirect=" results

  echo ""
  echo "?all details:"
  grep "\?all" results

  echo ""
  echo "~all details:"
  grep "~all" results

  echo ""
  echo "-all details:"
  grep "\-all" results
fi

